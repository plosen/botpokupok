import telebot
from telebot import types
import logging
from database import initialize_db, add_item, remove_item, get_items, clear_items, add_reminder, get_due_reminders, remove_reminder, get_items_grouped
import csv
import io
import schedule
import time
import threading
from datetime import datetime

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather
TOKEN = '7677603819:AAFo0a_nbSAIMlAqwb5rhseaPT8GQLErhtA'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
initialize_db()

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user = message.from_user
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫. –í–æ—Ç, —á—Ç–æ —è —É–º–µ—é:\n"
        "/add [—Ç–æ–≤–∞—Ä] [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π.\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.\n"
        "/remove [—Ç–æ–≤–∞—Ä] - –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.\n"
        "/clear - –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.\n"
        "/export - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –≤ CSV.\n"
        "/remind [—Ç–æ–≤–∞—Ä] [YYYY-MM-DD HH:MM] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞."
    )
    bot.send_message(message.chat.id, welcome_text, reply_markup=main_menu())

# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = (
        "üìã **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**\n\n"
        "/add [—Ç–æ–≤–∞—Ä] [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] - –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π.\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.\n"
        "/remove [—Ç–æ–≤–∞—Ä] - –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.\n"
        "/clear - –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.\n"
        "/export - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –≤ CSV.\n"
        "/remind [—Ç–æ–≤–∞—Ä] [YYYY-MM-DD HH:MM] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /add
@bot.message_handler(commands=['add'])
def add_command(message):
    user_id = message.from_user.id
    try:
        args = message.text.split(' ', 2)  # /add —Ç–æ–≤–∞—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        if len(args) >= 2:
            item = args[1].strip()
            category = args[2].strip() if len(args) == 3 else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            add_item(user_id, item, category)
            bot.reply_to(message, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {item} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")
        else:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü—Ä–∏–º–µ—Ä: /add –ú–æ–ª–æ–∫–æ –ü—Ä–æ–¥—É–∫—Ç—ã")
    except Exception as e:
        logger.error(f"Error in add_command: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /list
@bot.message_handler(commands=['list'])
def list_command(message):
    user_id = message.from_user.id
    try:
        grouped_items = get_items_grouped(user_id)
        if grouped_items:
            response = "üõí –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:\n"
            for category, items in grouped_items.items():
                response += f"\nüìÇ *{category}*\n"
                for item in items:
                    response += f" - {item}\n"
            bot.send_message(message.chat.id, response, parse_mode='Markdown', reply_markup=main_menu())
        else:
            bot.send_message(message.chat.id, "–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.", reply_markup=main_menu())
    except Exception as e:
        logger.error(f"Error in list_command: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫.")

# –ö–æ–º–∞–Ω–¥–∞ /remove
@bot.message_handler(commands=['remove'])
def remove_command(message):
    user_id = message.from_user.id
    try:
        args = message.text.split(' ', 1)  # /remove —Ç–æ–≤–∞—Ä
        if len(args) == 2:
            item = args[1].strip()
            items = get_items(user_id)
            if item in items:
                remove_item(user_id, item)
                bot.reply_to(message, f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {item}")
            else:
                bot.reply_to(message, "‚ùå –¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.")
        else:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /remove –ú–æ–ª–æ–∫–æ")
    except Exception as e:
        logger.error(f"Error in remove_command: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /clear
@bot.message_handler(commands=['clear'])
def clear_command(message):
    user_id = message.from_user.id
    try:
        markup = types.InlineKeyboardMarkup()
        btn_yes = types.InlineKeyboardButton(text="–î–∞", callback_data="confirm_clear_yes")
        btn_no = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="confirm_clear_no")
        markup.add(btn_yes, btn_no)
        bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫? üóë", reply_markup=markup)
    except Exception as e:
        logger.error(f"Error in clear_command: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.")

# –ö–æ–º–∞–Ω–¥–∞ /export
@bot.message_handler(commands=['export'])
def export_command(message):
    user_id = message.from_user.id
    try:
        grouped_items = get_items_grouped(user_id)
        if grouped_items:
            # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
            output = io.StringIO()
            writer = csv.writer(output)
            writer.writerow(['–¢–æ–≤–∞—Ä', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'])
            for category, items in grouped_items.items():
                for item in items:
                    writer.writerow([item, category])
            output.seek(0)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            bot.send_document(message.chat.id, ('shopping_list.csv', output))
        else:
            bot.send_message(message.chat.id, "–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.", reply_markup=main_menu())
    except Exception as e:
        logger.error(f"Error in export_command: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫.")

# –ö–æ–º–∞–Ω–¥–∞ /remind
@bot.message_handler(commands=['remind'])
def remind_command(message):
    user_id = message.from_user.id
    try:
        args = message.text.split(' ', 2)  # /remind —Ç–æ–≤–∞—Ä –≤—Ä–µ–º—è
        if len(args) >= 3:
            item = args[1].strip()
            remind_at = args[2].strip()  # –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç 'YYYY-MM-DD HH:MM'
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            try:
                remind_time = datetime.strptime(remind_at, '%Y-%m-%d %H:%M')
                add_reminder(user_id, item, remind_at)
                bot.reply_to(message, f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {item} –≤ {remind_at}")
            except ValueError:
                bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'YYYY-MM-DD HH:MM'. –ü—Ä–∏–º–µ—Ä: /remind –ú–æ–ª–æ–∫–æ 2025-12-31 10:00")
        else:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏ –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: /remind –ú–æ–ª–æ–∫–æ 2025-12-31 10:00")
    except Exception as e:
        logger.error(f"Error in remind_command: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@bot.message_handler(func=lambda message: True)
def echo_all(message):
    text = message.text.lower()
    if text.startswith("–¥–æ–±–∞–≤—å") or text.startswith("–¥–æ–±–∞–≤–∏—Ç—å"):
        parts = message.text.split(' ', 2)
        if len(parts) > 1:
            item = parts[1].strip()
            category = parts[2].strip() if len(parts) == 3 else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            add_item(message.from_user.id, item, category)
            bot.reply_to(message, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {item} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")
        else:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü—Ä–∏–º–µ—Ä: –î–æ–±–∞–≤—å –ú–æ–ª–æ–∫–æ –ü—Ä–æ–¥—É–∫—Ç—ã")
    else:
        bot.reply_to(message, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn_add = types.KeyboardButton("/add")
    btn_list = types.KeyboardButton("/list")
    btn_remove = types.KeyboardButton("/remove")
    btn_clear = types.KeyboardButton("/clear")
    btn_export = types.KeyboardButton("/export")
    btn_remind = types.KeyboardButton("/remind")
    btn_help = types.KeyboardButton("/help")
    markup.add(btn_add, btn_list, btn_remove, btn_clear, btn_export, btn_remind, btn_help)
    return markup

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    user_id = call.from_user.id
    data = call.data

    if data.startswith("remove_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        item = data.split("remove_", 1)[1]
        try:
            remove_item(user_id, item)
            bot.answer_callback_query(call.id, f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {item}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            grouped_items = get_items_grouped(user_id)
            if grouped_items:
                response = "üõí –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:\n"
                for category, items in grouped_items.items():
                    response += f"\nüìÇ *{category}*\n"
                    for itm in items:
                        response += f" - {itm}\n"
                bot.edit_message_text(chat_id=call.message.chat.id,
                                      message_id=call.message.message_id,
                                      text=response,
                                      parse_mode='Markdown',
                                      reply_markup=main_menu())
            else:
                bot.edit_message_text(chat_id=call.message.chat.id,
                                      message_id=call.message.message_id,
                                      text="–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.",
                                      reply_markup=main_menu())
        except Exception as e:
            logger.error(f"Error in callback_query remove: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")

    elif data == "confirm_clear_yes":
        try:
            clear_items(user_id)
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text="üóë –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –æ—á–∏—â–µ–Ω.",
                                  reply_markup=main_menu())
            bot.answer_callback_query(call.id, "‚úÖ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω.")
        except Exception as e:
            logger.error(f"Error in callback_query clear_yes: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ø–∏—Å–∫–∞.")
    elif data == "confirm_clear_no":
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text="‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                              reply_markup=main_menu())
        bot.answer_callback_query(call.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def check_reminders():
    while True:
        current_time = datetime.now().strftime('%Y-%m-%d %H:%M')
        due_reminders = get_due_reminders(current_time)
        for user_id, item in due_reminders:
            try:
                bot.send_message(user_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ü–æ—Ä–∞ –∫—É–ø–∏—Ç—å {item}!")
                # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                remove_reminder(user_id, item, current_time)
            except Exception as e:
                logger.error(f"Error sending reminder to {user_id}: {e}")
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def run_scheduler():
    scheduler_thread = threading.Thread(target=check_reminders)
    scheduler_thread.daemon = True
    scheduler_thread.start()

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    run_scheduler()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    bot.infinity_polling()

if __name__ == '__main__':
    main()
